import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Number counter = 1
var Timer timer = null
var String ArduinoUpdate = ""
var String Arduino2Update = ""
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "Crontest"
	when 
		Time cron "0/15 * * * * ?"
	then
		//say(counter)
		counter = counter + 1
end	

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
rule "Dimmed Light"
	when
		Item DimmedLight received command
	then
		var Number percent = 0
		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(DimmedLight, percent);
end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end

/**
 * This rules controls the volume on the local host
 */
rule "Volume control"
	when
		Item Volume received command
	then
		if(receivedCommand instanceof PercentType) {
			setMasterVolume(receivedCommand as PercentType)
		} else {
			if(receivedCommand==INCREASE) increaseMasterVolume(20)
			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
		}
		postUpdate(Volume, masterVolume * 100)
end
/*
rule "Say temperature on update"
	when 
		Item Weather_Temperature received update
	then
		//say("The temperature outside is " + Weather_Temperature.state.format("%d") + " degrees celsius")
end
*/
/**
 * The following rules help initializing the demo items with some helpful states.
 */
rule "Initialize light states"
	when
		System started
	then
		Lights?.members.forEach(light|
			postUpdate(light, if(Math::random > 0.7) ON else OFF)
		)
end

rule "Initialize heating states"
	when 
		System started
	then
		Heating?.members.forEach(heating|
			postUpdate(heating, if(Math::random > 0.8) ON else OFF)
		)
		postUpdate(Temperature_Setpoint, 22)
end

rule "Initialize contact states"
	when 
		System started
	then
		Windows?.members.forEach(window|
			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
		)
end

rule "Set random room temperatures"
	when 
		System started or
		Time cron "0 0/5 * * * ?"
	then
		Temperature?.members.forEach(temperature|
			postUpdate(temperature, 20.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
		)
end

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
end

/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		
	}
end

/** 
 * shows how to check recent switch states - very helpful to avoid executing something too often, just
 * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
 */
rule "Persistence Demo 2"
when
	Item DemoSwitch received command
then
	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
		logInfo("Persistence Demo", "You did not press this button during the last 5 seconds!")
	}
end

rule "Timer Demo"
when
	Item Licht_UG_Flur received command
then
	if(receivedCommand==ON) {
		if(timer==null) {
			// first ON command, so create a timer to turn the light off again
			timer = createTimer(now.plusSeconds(20)) [|
				sendCommand(Licht_UG_Flur, OFF)
			]
		} else {
			// subsequent ON command, so reschedule the existing timer
			timer.reschedule(now.plusSeconds(10))
		}
	} else if(receivedCommand==OFF) {
		// remove any previously scheduled timer
		if(timer!=null) {
			timer.cancel
			timer = null
		}	
	}
end
rule "Arduino LED red"
	when
		Item Heating_GF_Kitchen received update
	then	   
		sendCommand(Arduino, (if(Heating_GF_Kitchen.state==ON) "A11111;10000" else "B11111;10000"))		
		ArduinoUpdate = ""		
end
rule "Arduino Licht_UG_Wohnz_Glas"
	when
		Item Licht_UG_Wohnz_Glas  received update
	then
		sendCommand(Arduino, (if(Licht_UG_Wohnz_Glas.state==ON) "A11110;01000" else "B11110;01000"))
		ArduinoUpdate = ""
end
rule "Arduino kl_St_la"
	when
		Item Licht_UG_Wohnz_kl_St_La  received update
	then
		sendCommand(Arduino, (if(Licht_UG_Wohnz_kl_St_La.state==ON) "A11111;10000" else "B11111;10000"))
		ArduinoUpdate = ""
end
rule "Arduino Licht_UG_Wohnz_Schrank"
	when
		Item Licht_UG_Wohnz_Schrank  received update
	then
		sendCommand(Arduino, (if(Licht_UG_Wohnz_Schrank.state==ON) "A11111;01000" else "B11111;01000"))
		ArduinoUpdate = ""
end
rule "Arduino Licht_UG_Wohnz_Esstisch"
	when
		Item Licht_UG_Wohnz_Esstisch  received update
	then
		sendCommand(Arduino, (if(Licht_UG_Wohnz_Esstisch.state==ON) "A11111;00100" else "B11111;00100"))
		ArduinoUpdate = ""
end
rule "Arduino gr_St_la"
	when
		Item Licht_UG_Wohnz_gr_St_La  received update
	then
		sendCommand(Arduino, (if(Licht_UG_Wohnz_gr_St_La.state==ON) "A11111;00010" else "B11111;00010"))
		ArduinoUpdate = ""
end
rule "Arduino Licht AZ"
	when
		Item Licht_OG_Buero  received update
	then
		sendCommand(Arduino, (if(Licht_OG_Buero.state==ON) "A11110;10000" else "B11110;10000"))
		ArduinoUpdate = ""
end
rule "Arduino Drucker"
	when
		Item Drucker_OG_Buero  received update
	then
		sendCommand(Arduino, (if(Drucker_OG_Buero.state==ON) "A11110;00010" else "B11110;00010"))
		ArduinoUpdate = ""
end
//postUpdate(Arduino,"1") //println(%2$tY-%2$tm-%2$td %2$tT : %1$s)
rule "Arduino2 on update"
	when 
		Item Arduino2 received update
	then
	    //Arduino2Update =  Arduino2.state.toString.trim  //Arduino2Update +
	    println("Arduino2Update: " + Arduino2Update)
	    if (Arduino2Update.contains(";")) {
			if (Arduino2Update.contains("id=5")) {
				println ("OK")
				postUpdate(Light_GF_Kitchen_Ceiling, if(Arduino2Update.contains("value=19")) ON else OFF)
			}
			if (Arduino2Update.contains("id=A02")) {
				postUpdate(Light_GF_Kitchen_Table, if(Arduino2Update.contains("value=ON")) ON else OFF)
			}
			if (Arduino2Update.contains("item=B3")) {
				postUpdate(Shutter_GF_Kitchen, 50)
			}
			if (Arduino2Update.contains("type=t")) {
				//println("test")
				var int valueStartsOn = Arduino2Update.indexOf("value=") + "value=".length
				//println(valueStartsOn +" "+ Arduino2Update.indexOf(';'));
				var String myTemperatureAsString = Arduino2Update.mid(valueStartsOn, Arduino2Update.indexOf(';')-valueStartsOn)
				//println(myTemperatureAsString);
//				println("tte" + Arrays.toString(Arduino2Update.split("value=").toArray))
				Arduino2Update.split(";").toArray
				var Number myTemperature = 0.0f
				myTemperature = Float::parseFloat(myTemperatureAsString)
				postUpdate(Temperature_GF_Kitchen, myTemperature)
				//println("ArduinoTemperatur: " + myTemperature)
			}
			Arduino2Update = ""
		}
end
/* 		
rule "Arduino2 on update"
	when 
		Item Arduino2 received update
	then
	Arduino2Update = Arduino2Update + Arduino2.state.toString.trim
	println("1: "+ Arduino2Update)
	//Arduino2Update = Arduino2Update + Arduino2.state.toString.trim
	//println("Arduino2Update: " + Arduino2Update)
	Arduino2Update = ""
end

*/